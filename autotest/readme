django安装：pip install django
创建项目：django-admin startproject  autotest
创建应用：进入项目autotest目录下：python manage.py  startapp XXX
创建表：models.py
迁移同步数据：python manage.py  makemigrations ;     python manage.py  migrate
创建用户：python manage.py  createsuperuser
启动服务：python manage.py  runserver  ip：port

项目结构：
项目名称：autotest（一级目录）
二级目录：
>应用：apimodule：模块管理，apitest：用例管理，report：报告管理，autotask：定时任务，set：系统设置
>其他目录：log：日志，result：报告，static：静态文件，templates：html文件，script：脚本，manage.py:执行命令

定时任务配置（celery）：注意版本
1、安装celery：pip install celery=3.1.26
2、安装django-celery: pip install django-celery=3.2.2
    setting文件：INSTALLED_APP=[] 加入'djcelery'
    执行：python manage.py migrate
3、安装redis模块：pip install redis=2.10.6
4、安装redis服务：网上下载，点击exe安装，并启动服务
5、celery配置：
》在setting.py文件加入：
        #加载djcelery
        import djcelery
        djcelery.setup_loader()
        CELERY_ENABLE_UTC = False
        CELERY_TIMEZONE  =  TIME_ZONE
        CELERYD_HIJACK_ROOT_LOGGER = False
        #数据库调度
        CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'

        BROKER_URL = 'redis://127.0.0.1:6379/0'
        BROKER_TRANSPORT = 'redis'
》在项目二级目录autotest下创建celery.py文件
        from __future__ import absolute_import
        import  os
        import django
        from celery import Celery
        from django.conf import settings
        '''定时任务的配置文件'''
        # 单独脚本调用Django内容时，需配置脚本的环境变量
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'autotest.settings')
        django.setup('autotest')

        app=Celery('autotest')
        #  在settings中写配置
        app.config_from_object('django.conf:settings')
        # 到Django各个app下，自动发现tasks.py 任务脚本
        app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)

        @app.task(bind=True)
        def debug_task(self):
            print('Request: {0!r}'.format(self.request))
6、可以在每个应用下都建立task.py文件，内容格式如下：
        from autotest.celery import app
        @app.task
        def hello_world():
            print('已运行')
            print('helloworld!')
            return '------end------'
6、启动服务：
    任务监听分发：python manage.py celery beat
    任务执行进程：python manage.py  celery worker -c 6 -l debug

7、日志配置：
在setting.py文件加入：
            import time
            label=time.strftime('%Y%m%d',time.localtime())
            path=BASE_DIR+os.sep+'log'+os.sep+label
            try:
                os.makedirs(path)
            except FileExistsError as e:
                pass
            LOGGING = {
                'version': 1,  # 保留字
                'disable_existing_loggers': False,  # 禁用已经存在的logger实例
                # 日志文件的格式
                'formatters': {
                    # 详细的日志格式
                    'standard': {
                        'format': '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]'
                                  '[%(levelname)s][%(message)s]'
                    },
                    # 简单的日志格式
                    'simple': {
                        'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
                    },

                },
                # 过滤器
                'filters': {
                    'require_debug_true': {
                        '()': 'django.utils.log.RequireDebugTrue',
                    },
                },
                # 处理器
                'handlers': {
                    # 在终端打印
                    'console': {
                        'level': 'DEBUG',
                        'filters': ['require_debug_true'],  # 只有在Django debug为True时才在屏幕打印日志
                        'class': 'logging.StreamHandler',  #
                        'formatter': 'simple'
                    },
                    # 默认的
                    'default': {
                        'level': 'INFO',
                        'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
                        'filename': os.path.join(path, ("%s_info.log")%label),  # 日志文件
                        'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
                        'backupCount': 3,  # 最多备份几个
                        'formatter': 'standard',
                        'encoding': 'utf-8',
                    },

                    # 专门用来记错误日志
                    'error': {
                        'level': 'ERROR',
                        'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
                        'filename': os.path.join(path, ("%s_err.log")%label),  # 日志文件
                        'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
                        'backupCount': 5,
                        'formatter': 'standard',
                        'encoding': 'utf-8',
                    },
                    # 专门定义一个收集脚本信息的日志
                    'script': {
                        'level': 'INFO',
                        'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
                        'filename': os.path.join(path, ("%s_script.log")%label),
                        'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
                        'backupCount': 5,
                        'formatter': 'standard',
                        'encoding': "utf-8"
                    }
                },
                'loggers': {
                   # 默认的logger应用如下配置
                    '': {
                        'handlers': ['default', 'console', 'error'],  # 上线之后可以把'console'移除
                        'level': 'DEBUG',
                        'propagate': True,  # 向不向更高级别的logger传递
                    },
                    # 名为 'script'的logger还单独处理
                    'script': {
                        'handlers': ['console', 'script','error'],
                        'level': 'DEBUG',
                    }
                },
            }
8、日志模块在项目中使用：
import logging
logger=logging.getLogger(__name__)
选择日志存放可以这样：
logger=logging.getLogger('script')
'script'就是在setting.py中配置的handlers{}

9、测试脚本模块目录结构：
目录名：script（二级目录）
包含（三级目录）：conf：配置，common：公用模块，casescript：用例脚本（在下级目录分为singleapi和flowapi和datacheck）,
                  case:用例,下级目录用模块名称命名，在下级目录分为singleapi和flowapi
